general {
    funcon-term: 
      initialise-binding
        multithread 
          sequential(update-thread-schedule{thread-cooperative},
          scope(
            {"t1" |-> thread-activate thread-detached thunk closure
              sequential(print 3, thread-yield( ), print 4)},
             scope(
               {"t2" |-> thread-activate thread-detached thunk closure
                 sequential(print 2, thread-yield bound "t1", print 5)},
             scope(
               {"t3" |-> thread-activate thread-detached thunk closure
                 sequential(print 1, thread-yield bound "t2")},
              thread-yield bound "t3")))
      )
        ;
    display-mutable-entity: "thread-map,thread-stepping,active-thread-set,terminated-thread-map";
    refocus: false;
}

tests {
    result-term: null-value;
    standard-out: [1, 2, 3, 4, 5];
}
