general {
  funcon-term: sequential (
      check-true(is-equal(tuple list-elements list( ), tuple( )))
    , check-true(is-equal(tuple list-elements list(1), tuple(1)))
    , check-true(is-equal(tuple list-elements list(1,2,1,3), tuple(1,2,1,3)))
    , check-true(is-equal(list-nil, list( )))
    , check-true(is-equal(list-cons(1,list( )), list(1)))
    , check-true(is-equal(list-cons(1,list(2,3)), list(1,2,3)))
    , check-true(is-equal(list-head(list(1)), 1))
    , check-true(is-equal(list-head(list(1,2,3)), 1))
    , check-true(not is-value list-head(list( )))
    , check-true(is-equal(list-tail(list(1)), list( )))
    , check-true(is-equal(list-tail(list(1,2,3)), list(2,3)))
    , check-true(not is-value list-tail(list( )))
    , check-true(is-equal(list-append( ), list( )))
    , check-true(is-equal(list-append(list( )), list( )))
    , check-true(is-equal(list-append(list(1,2,3,4)), list(1,2,3,4)))
    , check-true(is-equal(list-append(list(1,2), list(3,4)), list(1,2,3,4)))
    , check-true(is-equal(list-append(list(1), list(2,3,4)), list(1,2,3,4)))
    , check-true(is-equal(list-append(list( ), list(1,2,3,4)), list(1,2,3,4)))
    , check-true(is-equal(list-append(list(1,2,3,4),list( )), list(1,2,3,4)))
    , check-true(is-equal(list-append(list(1),list(2),list(3,4)), list(1,2,3,4)))
    , print "OK"
    );
}

tests {
    result-term : null-value;
    standard-out : ["OK"];
} 
