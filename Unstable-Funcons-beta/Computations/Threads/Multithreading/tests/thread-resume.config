general {
    funcon-term: 
      initialise-binding
        multithread 
          sequential(update-thread-schedule{thread-cooperative},
          scope(
            {"t1" |-> thread-activate thread-detached thunk closure
              sequential(print 4, thread-yield( ), print 5)},
             scope(
               {"t2" |-> thread-activate thread-detached thunk closure
                 print 6},
               sequential(
                 print 1,
                 thread-suspend(bound "t1", bound "t2"),
                 print 2,
                 thread-resume bound "t1",
                 print 3,
                 thread-resume bound "t2"
                 )))
      )
        ;
    display-mutable-entity: "thread-map,thread-stepping,active-thread-set,terminated-thread-map";
    refocus: false;
}

tests {
    result-term: null-value;
    standard-out: [1, 2, 3, 4, 5, 6];
}
