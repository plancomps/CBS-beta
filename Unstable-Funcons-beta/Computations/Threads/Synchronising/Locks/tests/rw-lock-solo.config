 general {
    funcon-term:
      initialise-binding
      initialise-storing
        multithread
          sequential(
            update-thread-schedule{thread-preemptible},
            scope({"m" |-> rw-lock-create},
              sequential(
                rw-lock-sync-exclusive bound"m",
                print "w1",
                give(
                  thread-activate thread-joinable thunk closure
                    sequential(
                      else(rw-lock-sync-shared bound"m", print "r1"),
                      else(rw-lock-sync-shared bound"m", print "r2"),
                      else(rw-lock-sync-shared bound"m", print "r3"),
                      rw-lock-release-shared bound"m", print "r4"),
                  sequential(
                    rw-lock-release-exclusive bound"m",
                    print "w2",
                    thread-join given,
                    print "OK"
                  ))))
          )
        ;
    display-mutable-entity: "store,thread-map,thread-stepping,active-thread-set,terminated-thread-map";
    refocus: false;
    non-deterministic: "value-operations";
    seed: 1500;
  }

tests {
    result-term: null-value;
    standard-out: ["w1","w2","r1","r4","OK"];
}
