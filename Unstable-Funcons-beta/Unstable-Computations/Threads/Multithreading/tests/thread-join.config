 general {
    funcon-term: 
      initialise-binding
        multithread 
          sequential(
            update-thread-schedule{thread-preemptible},
            scope(
              {"t1" |-> thread-activate thread-joinable thunk closure
                            sequential(print 3, print 4, thread-terminate(current-thread, 6))},
              scope(
                {"t2" |-> thread-activate thread-joinable thunk closure
                            sequential(thread-join bound "t1", print 5)},
                sequential(
                  print 1,
                  thread-yield bound "t1",
                  print 2,
                  thread-yield bound "t2",
                  thread-join bound "t2",
                  print thread-value bound "t1"
                 )))
      )
        ;
    display-mutable-entity: "thread-map,thread-stepping,active-thread-set,terminated-thread-map";
    refocus: false;
}

tests {
    result-term: null-value;
    standard-out: [1, 2, 3, 4, 5, 6];
}
