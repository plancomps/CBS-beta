 general {
    funcon-term: 
      initialise-binding
        multithread 
          sequential(
            update-thread-schedule{thread-cooperative},
            scope(
              {"t" |-> current-thread},
              scope(
                {"t1" |-> thread-activate thread-joinable thunk closure
                            sequential(print 2, thread-yield bound "t", print 5),
                 "t2" |-> thread-activate thread-detached thunk closure
                            print 6},
                sequential(
                  print 1,
                  thread-yield bound "t1",
                  print 3,
                  thread-terminate(bound "t1", 4),
                  if-true-else(
                    is-thread-terminated bound "t1", 
                    print thread-value bound "t1" ,
                    print 0),
                  print 5,
                  thread-exterminate bound "t2"
                 )))
      )
        ;
    display-mutable-entity: "thread-map,thread-stepping,active-thread-set,terminated-thread-map";
    refocus: false;
}

tests {
    result-term: null-value;
    standard-out: [1, 2, 3, 4, 5];
}
