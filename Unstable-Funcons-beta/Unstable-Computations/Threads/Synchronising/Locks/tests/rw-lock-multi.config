 general {
    funcon-term:
      initialise-binding
      initialise-storing
        multithread
          sequential(
            update-thread-schedule{thread-preemptible},
            scope({"m" |-> rw-lock-create},
              sequential(
                rw-lock-sync-shared bound"m", print "r1",
                rw-lock-sync-shared bound"m", print "r2",
                scope({"r" |->
                  thread-activate thread-joinable thunk closure
                    sequential(
                      rw-lock-sync-shared bound"m", print "r3",
                      rw-lock-release-shared bound"m", print "r4")},
                  sequential(
                    rw-lock-release-shared bound"m", print "r5",
                    scope({"w" |->
                      thread-activate thread-joinable thunk closure
                        sequential(
                          rw-lock-sync-exclusive-else-wait bound"m", print "w1",
                          rw-lock-release-exclusive bound"m", print "w2")},
                      sequential(
                        print "r6", rw-lock-release-shared bound"m",
                        thread-join bound"r",
                        thread-join bound"w",
                        print "OK"))
                  ))))
          )
        ;
    display-mutable-entity: "store,thread-map,thread-stepping,active-thread-set,terminated-thread-map";
    refocus: false;
    non-deterministic: "value-operations";
    seed: 1500;
  }

tests {
    result-term: null-value;
    standard-out: ["r1","r2","r5","r3","r4","r6","w1","w2","OK"];
}
