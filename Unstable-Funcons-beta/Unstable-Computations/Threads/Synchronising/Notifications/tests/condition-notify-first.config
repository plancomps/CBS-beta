 general {
    funcon-term: 
      initialise-binding
      initialise-storing
        multithread 
          sequential(
            update-thread-schedule{thread-preemptible},
            scope({"m" |-> condition-create,
                   "f" |-> condition-create,
                   "l" |-> exclusive-lock-create,
                   "v" |-> allocate-initialised-variable(integers, 0)},
              scope(
                {"p" |->
                  function closure
                    sequential(
                      exclusive-lock-sync-else-wait bound"l",
                      while-true(is-equal(assigned bound "v", 1),
                        condition-wait-with-lock(bound"m", bound"l")), 
                      print given,
                      assign(bound"v", 1),
                      condition-notify-all bound"f",
                      exclusive-lock-release bound"l"),
                  "c" |->
                  function closure
                    sequential(
                      exclusive-lock-sync-else-wait bound"l",
                      while-true(is-equal(assigned bound "v", 0),
                        condition-wait-with-lock(bound"f", bound"l")), 
                      print given,
                      assign(bound"v", 0),
                      condition-notify-all bound"m",
                      exclusive-lock-release bound"l")},
                sequential(
                  effect thread-activate thread-detached supply(bound"p", "p1"),
                  effect thread-activate thread-detached supply(bound"p", "p2"),
                  effect thread-activate thread-detached supply(bound"c", "c1"),
                  effect thread-activate thread-detached supply(bound"c", "c2"),
                  condition-notify-all bound"m")))               
          )
        ;
    display-mutable-entity: "store,thread-map,thread-stepping,active-thread-set,terminated-thread-map";
    refocus: false;
    non-deterministic: "value-operations";
    seed: 100;
  }

tests {
    result-term: null-value;
    standard-out: ["p1","c1","p2","c2"];
}
